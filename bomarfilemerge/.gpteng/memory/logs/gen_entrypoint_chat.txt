
2024-05-31T19:58:52.096131
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: src/bookmark_parser.py
1 from typing import List
2 import re
3 
4 class BookmarkParser:
5     def __init__(self, file_path: str):
6         self.file_path = file_path
7         self.bookmarks = []
8 
9     def parse(self):
10         with open(self.file_path) as f:
11             content = f.read()
12             matches = re.findall(r'<a href="(.*?)"', content, re.DOTALL)
13             for match in matches:
14                 self.bookmarks.append(match)
15         return self.bookmarks

File: src/directory_scanner.py
1 import os
2 from pathlib import Path
3 
4 class DirectoryScanner:
5     def __init__(self, directory: str):
6         self.directory = directory
7 
8     def scan(self):
9         bookmark_files = []
10         for root, _, files in os.walk(self.directory):
11             for file in files:
12                 if file.endswith('bookmark.html'):
13                     bookmark_files.append(Path(root) / file)
14         return bookmark_files

File: src/bookmark_writer.py
1 from typing import List
2 import os
3 
4 class BookmarkWriter:
5     def __init__(self, output_file: str):
6         self.output_file = output_file
7 
8     def write(self, bookmarks: List[str]):
9         with open(self.output_file, 'w') as f:
10             for bookmark in bookmarks:
11                 f.write(f'<a href="{bookmark}">\n')

File: src/main.py
1 import sys
2 from dataclasses import asdict
3 from typing import List
4 
5 from bookmark_parser import BookmarkParser
6 from directory_scanner import DirectoryScanner
7 from bookmark_writer import BookmarkWriter
8 
9 def main():
10     if len(sys.argv) != 2:
11         print("Usage: python3 main.py <directory>")
12         sys.exit(1)
13 
14     directory = sys.argv[1]
15     scanner = DirectoryScanner(directory)
16     bookmark_files = scanner.scan()
17     combined_bookmarks = []
18 
19     for file in bookmark_files:
20         parser = BookmarkParser(file)
21         bookmarks = parser.parse()
22         combined_bookmarks += bookmarks
23 
24     writer = BookmarkWriter('consolidated_bookmarks.html')
25     writer.write(combined_bookmarks)
26     print("Consolidation complete!")
27 
28 if __name__ == "__main__":
29     main()

File: requirements.txt
1 pytest

```

================================== Ai Message ==================================

 Create a file named `run_script.sh` with the following content:

```bash
#!/bin/bash

# Install dependencies
pip install -r requirements.txt

# Run the codebase in parallel using GNU Parallel
find src -name '*.py' | parallel python3 {}
```

Make the script executable:

```bash
chmod +x run_script.sh
```

Run the script with a directory argument:

```bash
./run_script.sh <directory>
```
